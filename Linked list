class ListNode {
    int val;
    ListNode next;
    
    ListNode(int x) {
        val = x;
    }
}

public class AddTwoNumbers {
    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0); // Dummy head for the result list
        ListNode current = dummyHead; // Pointer to build the new list
        int carry = 0; // Initialize carry to 0
        
        // Loop until both lists are exhausted
        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry; // Start with the carry
            
            // Add the value from l1 if available
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next; // Move to the next node
            }
            
            // Add the value from l2 if available
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next; // Move to the next node
            }
            
            // Update carry for the next iteration
            carry = sum / 10;
            // Create a new node with the digit value (sum % 10)
            current.next = new ListNode(sum % 10);
            current = current.next; // Move to the next node in the result list
        }
        
        return dummyHead.next; // Return the next node of dummy head, which is the actual result
    }

    public static void main(String[] args) {
        // Example usage
        ListNode l1 = new ListNode(2);
        l1.next = new ListNode(4);
        l1.next.next = new ListNode(3);
        
        ListNode l2 = new ListNode(5);
        l2.next = new ListNode(6);
        l2.next.next = new ListNode(4);
        
        ListNode result = addTwoNumbers(l1, l2);
        printList(result); // Output: [7, 0, 8]

        // Additional test cases
        ListNode l3 = new ListNode(0);
        ListNode l4 = new ListNode(0);
        ListNode result2 = addTwoNumbers(l3, l4);
        printList(result2); // Output: [0]

        ListNode l5 = new ListNode(9);
        l5.next = new ListNode(9);
        l5.next.next = new ListNode(9);
        l5.next.next.next = new ListNode(9);
        l5.next.next.next.next = new ListNode(9);
        l5.next.next.next.next.next = new ListNode(9);
        l5.next.next.next.next.next.next = new ListNode(9);
        
        ListNode l6 = new ListNode(9);
        l6.next = new ListNode(9);
        l6.next.next = new ListNode(9);
        l6.next.next.next = new ListNode(9);
        
        ListNode result3 = addTwoNumbers(l5, l6);
        printList(result3); // Output: [8, 9, 9, 9, 0, 0, 0, 1]
    }

    // Helper method to print the linked list
    public static void printList(ListNode node) {
        while (node != null) {
            System.out.print(node.val);
            if (node.next != null) {
                System.out.print(" -> ");
            }
            node = node.next;
        }
        System.out.println();
    }
}
